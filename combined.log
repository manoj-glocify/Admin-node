{"clientVersion":"5.22.0","errorCode":"P1000","level":"error","message":"PostgreSQL connection error: Authentication failed against database server at `localhost`, the provided database credentials for `postgres` are not valid.\n\nPlease make sure to provide valid database credentials for the database server at `localhost`.","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: Authentication failed against database server at `localhost`, the provided database credentials for `postgres` are not valid.\n\nPlease make sure to provide valid database credentials for the database server at `localhost`.\n    at t (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:112:2488)\n    at main (/Applications/github_code/My applications/Admin-node/src/index.ts:61:5)","timestamp":"2025-06-03T08:19:45.660Z"}
{"clientVersion":"5.22.0","errorCode":"P1000","level":"error","message":"PostgreSQL connection error: Authentication failed against database server at `localhost`, the provided database credentials for `postgres` are not valid.\n\nPlease make sure to provide valid database credentials for the database server at `localhost`.","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: Authentication failed against database server at `localhost`, the provided database credentials for `postgres` are not valid.\n\nPlease make sure to provide valid database credentials for the database server at `localhost`.\n    at t (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:112:2488)\n    at main (/Applications/github_code/My applications/Admin-node/src/index.ts:61:5)","timestamp":"2025-06-03T08:23:48.930Z"}
{"level":"info","message":"Connected to PostgreSQL database","timestamp":"2025-06-03T08:27:05.379Z"}
{"level":"info","message":"Server is running on port 3000","timestamp":"2025-06-03T08:27:05.382Z"}
{"level":"info","message":"Environment: development","timestamp":"2025-06-03T08:27:05.382Z"}
{"level":"info","message":"API Documentation: http://localhost:3000/api-docs","timestamp":"2025-06-03T08:27:05.382Z"}
{"clientVersion":"5.22.0","code":"P2021","level":"error","message":"Unexpected error: \nInvalid `prisma.user.findUnique()` invocation in\n/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:44\n\n  15 const { email, password, firstName, lastName } = req.body;\n  16 \n  17 // Check if user already exists\n→ 18 const existingUser = await prisma.user.findUnique(\nThe table `public.users` does not exist in the current database.","meta":{"modelName":"User","table":"public.users"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:44\n\n  15 const { email, password, firstName, lastName } = req.body;\n  16 \n  17 // Check if user already exists\n→ 18 const existingUser = await prisma.user.findUnique(\nThe table `public.users` does not exist in the current database.\n    at $n.handleRequestError (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:7315)\n    at $n.handleAndLogRequestError (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at l (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at register (/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:26)","timestamp":"2025-06-03T08:28:27.212Z"}
{"clientVersion":"5.22.0","code":"P2021","level":"error","message":"Unexpected error: \nInvalid `prisma.user.findUnique()` invocation in\n/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:44\n\n  15 const { email, password, firstName, lastName } = req.body;\n  16 \n  17 // Check if user already exists\n→ 18 const existingUser = await prisma.user.findUnique(\nThe table `public.users` does not exist in the current database.","meta":{"modelName":"User","table":"public.users"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:44\n\n  15 const { email, password, firstName, lastName } = req.body;\n  16 \n  17 // Check if user already exists\n→ 18 const existingUser = await prisma.user.findUnique(\nThe table `public.users` does not exist in the current database.\n    at $n.handleRequestError (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:7315)\n    at $n.handleAndLogRequestError (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at l (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at register (/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:26)","timestamp":"2025-06-03T08:28:31.533Z"}
{"clientVersion":"5.22.0","code":"P2021","level":"error","message":"Unexpected error: \nInvalid `prisma.user.findUnique()` invocation in\n/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:44\n\n  15 const { email, password, firstName, lastName } = req.body;\n  16 \n  17 // Check if user already exists\n→ 18 const existingUser = await prisma.user.findUnique(\nThe table `public.users` does not exist in the current database.","meta":{"modelName":"User","table":"public.users"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:44\n\n  15 const { email, password, firstName, lastName } = req.body;\n  16 \n  17 // Check if user already exists\n→ 18 const existingUser = await prisma.user.findUnique(\nThe table `public.users` does not exist in the current database.\n    at $n.handleRequestError (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:7315)\n    at $n.handleAndLogRequestError (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at l (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at register (/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:26)","timestamp":"2025-06-03T08:28:36.550Z"}
{"clientVersion":"5.22.0","code":"P2021","level":"error","message":"Unexpected error: \nInvalid `prisma.user.findUnique()` invocation in\n/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:44\n\n  15 const { email, password, firstName, lastName } = req.body;\n  16 \n  17 // Check if user already exists\n→ 18 const existingUser = await prisma.user.findUnique(\nThe table `public.users` does not exist in the current database.","meta":{"modelName":"User","table":"public.users"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:44\n\n  15 const { email, password, firstName, lastName } = req.body;\n  16 \n  17 // Check if user already exists\n→ 18 const existingUser = await prisma.user.findUnique(\nThe table `public.users` does not exist in the current database.\n    at $n.handleRequestError (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:7315)\n    at $n.handleAndLogRequestError (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at l (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at register (/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:26)","timestamp":"2025-06-03T08:28:37.313Z"}
{"clientVersion":"5.22.0","code":"P2021","level":"error","message":"Unexpected error: \nInvalid `prisma.user.findUnique()` invocation in\n/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:44\n\n  15 const { email, password, firstName, lastName } = req.body;\n  16 \n  17 // Check if user already exists\n→ 18 const existingUser = await prisma.user.findUnique(\nThe table `public.users` does not exist in the current database.","meta":{"modelName":"User","table":"public.users"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:44\n\n  15 const { email, password, firstName, lastName } = req.body;\n  16 \n  17 // Check if user already exists\n→ 18 const existingUser = await prisma.user.findUnique(\nThe table `public.users` does not exist in the current database.\n    at $n.handleRequestError (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:7315)\n    at $n.handleAndLogRequestError (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at l (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at register (/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:26)","timestamp":"2025-06-03T08:28:37.560Z"}
{"clientVersion":"5.22.0","code":"P2021","level":"error","message":"Unexpected error: \nInvalid `prisma.user.findUnique()` invocation in\n/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:44\n\n  15 const { email, password, firstName, lastName } = req.body;\n  16 \n  17 // Check if user already exists\n→ 18 const existingUser = await prisma.user.findUnique(\nThe table `public.users` does not exist in the current database.","meta":{"modelName":"User","table":"public.users"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:44\n\n  15 const { email, password, firstName, lastName } = req.body;\n  16 \n  17 // Check if user already exists\n→ 18 const existingUser = await prisma.user.findUnique(\nThe table `public.users` does not exist in the current database.\n    at $n.handleRequestError (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:7315)\n    at $n.handleAndLogRequestError (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at l (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at register (/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:26)","timestamp":"2025-06-03T08:28:37.732Z"}
{"clientVersion":"5.22.0","code":"P2021","level":"error","message":"Unexpected error: \nInvalid `prisma.user.findUnique()` invocation in\n/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:44\n\n  15 const { email, password, firstName, lastName } = req.body;\n  16 \n  17 // Check if user already exists\n→ 18 const existingUser = await prisma.user.findUnique(\nThe table `public.users` does not exist in the current database.","meta":{"modelName":"User","table":"public.users"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:44\n\n  15 const { email, password, firstName, lastName } = req.body;\n  16 \n  17 // Check if user already exists\n→ 18 const existingUser = await prisma.user.findUnique(\nThe table `public.users` does not exist in the current database.\n    at $n.handleRequestError (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:7315)\n    at $n.handleAndLogRequestError (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at l (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at register (/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:26)","timestamp":"2025-06-03T08:28:37.920Z"}
{"clientVersion":"5.22.0","code":"P2021","level":"error","message":"Unexpected error: \nInvalid `prisma.user.findUnique()` invocation in\n/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:44\n\n  15 const { email, password, firstName, lastName } = req.body;\n  16 \n  17 // Check if user already exists\n→ 18 const existingUser = await prisma.user.findUnique(\nThe table `public.users` does not exist in the current database.","meta":{"modelName":"User","table":"public.users"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:44\n\n  15 const { email, password, firstName, lastName } = req.body;\n  16 \n  17 // Check if user already exists\n→ 18 const existingUser = await prisma.user.findUnique(\nThe table `public.users` does not exist in the current database.\n    at $n.handleRequestError (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:7315)\n    at $n.handleAndLogRequestError (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at l (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at register (/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:26)","timestamp":"2025-06-03T08:28:38.314Z"}
{"clientVersion":"5.22.0","code":"P2021","level":"error","message":"Unexpected error: \nInvalid `prisma.user.findUnique()` invocation in\n/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:44\n\n  15 const { email, password, firstName, lastName } = req.body;\n  16 \n  17 // Check if user already exists\n→ 18 const existingUser = await prisma.user.findUnique(\nThe table `public.users` does not exist in the current database.","meta":{"modelName":"User","table":"public.users"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:44\n\n  15 const { email, password, firstName, lastName } = req.body;\n  16 \n  17 // Check if user already exists\n→ 18 const existingUser = await prisma.user.findUnique(\nThe table `public.users` does not exist in the current database.\n    at $n.handleRequestError (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:7315)\n    at $n.handleAndLogRequestError (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at l (/Applications/github_code/My applications/Admin-node/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at register (/Applications/github_code/My applications/Admin-node/src/modules/auth/controllers/authController.ts:18:26)","timestamp":"2025-06-03T08:28:42.145Z"}
{"level":"info","message":"Connected to PostgreSQL database","timestamp":"2025-06-03T09:55:18.619Z"}
{"level":"info","message":"Server is running on port 3000","timestamp":"2025-06-03T09:55:18.623Z"}
{"level":"info","message":"Environment: development","timestamp":"2025-06-03T09:55:18.623Z"}
{"level":"info","message":"API Documentation: http://localhost:3000/api-docs","timestamp":"2025-06-03T09:55:18.623Z"}
{"level":"info","message":"Connected to PostgreSQL database","timestamp":"2025-06-03T09:55:25.232Z"}
{"level":"info","message":"Server is running on port 3000","timestamp":"2025-06-03T09:55:25.235Z"}
{"level":"info","message":"Environment: development","timestamp":"2025-06-03T09:55:25.235Z"}
{"level":"info","message":"API Documentation: http://localhost:3000/api-docs","timestamp":"2025-06-03T09:55:25.236Z"}
{"level":"info","message":"Connected to PostgreSQL database","timestamp":"2025-06-03T09:55:43.236Z"}
{"level":"info","message":"Server is running on port 3000","timestamp":"2025-06-03T09:55:43.239Z"}
{"level":"info","message":"Environment: development","timestamp":"2025-06-03T09:55:43.240Z"}
{"level":"info","message":"API Documentation: http://localhost:3000/api-docs","timestamp":"2025-06-03T09:55:43.240Z"}
{"level":"info","message":"Connected to PostgreSQL database","timestamp":"2025-06-03T09:59:07.995Z"}
{"level":"info","message":"Server is running on port 3000","timestamp":"2025-06-03T09:59:07.998Z"}
{"level":"info","message":"Environment: development","timestamp":"2025-06-03T09:59:07.999Z"}
{"level":"info","message":"API Documentation: http://localhost:3000/api-docs","timestamp":"2025-06-03T09:59:07.999Z"}
{"level":"info","message":"Connected to PostgreSQL database","timestamp":"2025-06-03T10:09:25.374Z"}
{"level":"info","message":"Server is running on port 3000","timestamp":"2025-06-03T10:09:25.378Z"}
{"level":"info","message":"Environment: development","timestamp":"2025-06-03T10:09:25.378Z"}
{"level":"info","message":"API Documentation: http://localhost:3000/api-docs","timestamp":"2025-06-03T10:09:25.378Z"}
{"level":"info","message":"Connected to PostgreSQL database","timestamp":"2025-06-03T10:19:26.038Z"}
{"level":"info","message":"Server is running on port 3000","timestamp":"2025-06-03T10:19:26.042Z"}
{"level":"info","message":"Environment: development","timestamp":"2025-06-03T10:19:26.042Z"}
{"level":"info","message":"API Documentation: http://localhost:3000/api-docs","timestamp":"2025-06-03T10:19:26.042Z"}
